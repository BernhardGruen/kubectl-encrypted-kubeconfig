version: '3'

vars:
  PLUGIN_VERSION:
      sh: |-
        echo "${RELEASE_TAG:-dev}"
  GIT_REV:
    sh: |-
      if [ -n "${GITHUB_SHA:-}" ]; then
        echo "${GITHUB_SHA:-}"
      else
        git rev-parse --short HEAD
      fi
  BUILD_DATE:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  BIN_DIRECTORY: "bin"
  BINARY_NAME: "kubectl-encrypted-kubeconfig"
  BUNDLE_BASE_NAME: "encrypted-kubeconfig"
  PACKAGE_NAME: "github.com/n4-de/{{.BINARY_NAME}}"
  TARGETS:
    - linux-amd64
    - windows-amd64
    - darwin-arm64

tasks:
  default:
    cmds:
      - task: build
    silent: true

  modules:
    env:
      GO111MODULE: on
    cmds:
      - go mod tidy

  build:
    deps:
      - task: modules
    env:
      GO111MODULE: on
    cmds:
      - |
        for TARGET in {{ .TARGETS | join " " }}; do
          IFS='-' read -r GOOS GOARCH <<< "$TARGET"
          export GOARCH=$GOARCH
          export GOOS=$GOOS
          go build \
            -gcflags=all="-l -B" \
            -ldflags="-w -s
            -X {{.PACKAGE_NAME}}/cmd.version_name={{.BINARY_NAME}}
            -X {{.PACKAGE_NAME}}/cmd.version={{.PLUGIN_VERSION}}
            -X {{.PACKAGE_NAME}}/cmd.commit_rev={{.GIT_REV}}
            -X {{.PACKAGE_NAME}}/cmd.build_date={{.BUILD_DATE}}" \
            -o {{.BIN_DIRECTORY}}/{{.BINARY_NAME}}-$TARGET \
            main.go
        done

  bundle:
    deps:
      - task: prepare-bundle
    env:
      DOWNLOAD_URL: "./"
    cmds:
      - |
        export PLUGIN_VERSION="{{.PLUGIN_VERSION}}"
        export SHA256_LINUX_AMD64=$(sha256sum bundle/{{.BUNDLE_BASE_NAME}}-linux-amd64.tar.gz | cut -f 1 -d ' ')
        export SHA256_DARWIN_ARM64=$(sha256sum bundle/{{.BUNDLE_BASE_NAME}}-darwin-arm64.tar.gz | cut -f 1 -d ' ')
        export SHA256_WINDOWS_AMD64=$(sha256sum bundle/{{.BUNDLE_BASE_NAME}}-windows-amd64.zip | cut -f 1 -d ' ')
        envsubst < {{.BUNDLE_BASE_NAME}}.yaml.template > bundle/{{.BUNDLE_BASE_NAME}}.yaml

  prepare-bundle:
    internal: true
    deps:
      - task: build
    cmds:
      - |-
        for OSARCH in {{.TARGETS | join " "}}; do
          if [ "$OSARCH" = "windows-amd64" ]; then
            BUNDLE_TARGET="{{.BUNDLE_BASE_NAME}}.exe"
            ARCHIVE_EXT="zip"
            ARCHIVE_CMD="zip --quiet ../{{.BUNDLE_BASE_NAME}}-$OSARCH.$ARCHIVE_EXT *"
          else
            BUNDLE_TARGET="{{.BUNDLE_BASE_NAME}}"
            ARCHIVE_EXT="tar.gz"
            ARCHIVE_CMD="tar cfz ../{{.BUNDLE_BASE_NAME}}-$OSARCH.$ARCHIVE_EXT *"
          fi
          BUNDLE_PATH="bundle/$OSARCH"
          mkdir -p "$BUNDLE_PATH"
          cp -a {{.BIN_DIRECTORY}}/{{.BINARY_NAME}}-"$OSARCH" "$BUNDLE_PATH"/"$BUNDLE_TARGET"
          cp -a LICENSE "$BUNDLE_PATH"
          cd "$BUNDLE_PATH"
          eval $ARCHIVE_CMD
          cd - > /dev/null
          rm -r "$BUNDLE_PATH"
        done

  clean:
    cmds:
      - go clean
      - rm -rf bin/ bundle/

  test:
    cmds:
      - |
        for TARGET in {{ .TARGETS | join " " }}; do
          echo "$TARGET"
        done
